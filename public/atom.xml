<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知也无涯</title>
  
  <subtitle>人之学问, 知能成就, 犹骨象玉石, 切磋琢磨也</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-02T12:44:28.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cristiano-3</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SURF 图像匹配</title>
    <link href="http://yoursite.com/2018/05/02/image_match_surf/"/>
    <id>http://yoursite.com/2018/05/02/image_match_surf/</id>
    <published>2018-05-02T02:07:20.000Z</published>
    <updated>2018-05-02T12:44:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用SURF特征点匹配，在给定图像中找出和模板图像匹配的区域。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawMatches</span><span class="params">(img1_gray, post1, img2_gray, post2, goodMatch)</span>:</span></div><div class="line">    h1, w1 = img1_gray.shape[:<span class="number">2</span>]</div><div class="line">    h2, w2 = img2_gray.shape[:<span class="number">2</span>]</div><div class="line"></div><div class="line">    vis = np.zeros((max(h1, h2), w1 + w2, <span class="number">3</span>), np.uint8)</div><div class="line">    vis[:h1, :w1] = img1_gray</div><div class="line">    vis[:h2, w1:w1 + w2] = img2_gray</div><div class="line">    <span class="comment"># vis = np.hstack((img1_gray, img2_gray)) # 不可以, hstack两个图像必须一样高</span></div><div class="line"></div><div class="line">    post2 += (w1, <span class="number">0</span>)  <span class="comment"># 右图中的点, 在合并后的新图中坐标右移, 所以+(左图的宽度, 0)</span></div><div class="line">    <span class="keyword">for</span> (x1, y1), (x2, y2) <span class="keyword">in</span> zip(post1, post2):</div><div class="line">        cv2.line(vis, (x1, y1), (x2, y2), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> vis</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    target = cv2.imread(<span class="string">'target_fish.jpg'</span>)</div><div class="line">    source = cv2.imread(<span class="string">'fish.jpg'</span>)</div><div class="line">    target = cv2.resize(target, <span class="keyword">None</span>, <span class="keyword">None</span>, fx=<span class="number">0.7</span>, fy=<span class="number">0.7</span>)</div><div class="line"></div><div class="line">    <span class="comment"># get gray</span></div><div class="line">    target_gray = cv2.cvtColor(target, cv2.COLOR_BGR2GRAY)</div><div class="line">    source_gray = cv2.cvtColor(source, cv2.COLOR_BGR2GRAY)</div><div class="line"></div><div class="line">    <span class="comment"># detect surf keypoints and compute descriptors</span></div><div class="line">    detector = cv2.xfeatures2d.SURF_create()</div><div class="line">    kp1, des1 = detector.detectAndCompute(target_gray, <span class="keyword">None</span>)</div><div class="line">    kp2, des2 = detector.detectAndCompute(source_gray, <span class="keyword">None</span>)</div><div class="line"></div><div class="line">    <span class="comment"># match keypoints according to descriptors</span></div><div class="line">    matcher = cv2.FlannBasedMatcher()</div><div class="line">    matches = matcher.match(des1, des2)</div><div class="line"></div><div class="line">    <span class="comment"># find max and min dist</span></div><div class="line">    min_dist = <span class="number">100</span></div><div class="line">    max_dist = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> matches:</div><div class="line">        <span class="keyword">if</span> m.distance &lt; min_dist:</div><div class="line">            min_dist = m.distance</div><div class="line">        <span class="keyword">if</span> m.distance &gt; max_dist:</div><div class="line">            max_dist = m.distance</div><div class="line">    print(<span class="string">'min dist:'</span>, min_dist, <span class="string">' max dist:'</span>, max_dist)</div><div class="line"></div><div class="line">    <span class="comment"># find good matches</span></div><div class="line">    good_matches = []</div><div class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> matches:</div><div class="line">        <span class="comment"># Test 1</span></div><div class="line">        <span class="keyword">if</span> m.distance &lt; min_dist + <span class="number">0.3</span> * (max_dist - min_dist):</div><div class="line">        <span class="comment"># Test 2</span></div><div class="line">        <span class="comment"># if m.distance &lt; min_dist+0.08*(max_dist-min_dist):</span></div><div class="line">            good_matches.append(m)</div><div class="line">    print(<span class="string">'num of good matches:'</span>, len(good_matches))</div><div class="line"></div><div class="line">    <span class="comment"># get good matches points</span></div><div class="line">    p1 = [kpp.queryIdx <span class="keyword">for</span> kpp <span class="keyword">in</span> good_matches]</div><div class="line">    p2 = [kpp.trainIdx <span class="keyword">for</span> kpp <span class="keyword">in</span> good_matches]</div><div class="line"></div><div class="line">    post1 = np.float32([kp1[pp].pt <span class="keyword">for</span> pp <span class="keyword">in</span> p1])</div><div class="line">    post2 = np.float32([kp2[pp].pt <span class="keyword">for</span> pp <span class="keyword">in</span> p2])</div><div class="line"></div><div class="line">    <span class="comment"># get homography matrix</span></div><div class="line">    post1 = post1.reshape(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># .reshape(-1,1,2)很重要</span></div><div class="line">    post2 = post2.reshape(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment">#</span></div><div class="line">    H, mask = cv2.findHomography(post1, post2, cv2.RANSAC)  <span class="comment"># 求单应变换矩阵</span></div><div class="line">    <span class="keyword">print</span> H</div><div class="line"></div><div class="line">    <span class="comment"># get perspective points of target corners</span></div><div class="line">    h, w = target_gray.shape</div><div class="line">    target_corners = np.float32([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, h<span class="number">-1</span>], [w<span class="number">-1</span>, h<span class="number">-1</span>], [w<span class="number">-1</span>, <span class="number">0</span>]]).reshape(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># .reshape(-1,1,2)很重要</span></div><div class="line">    source_corners = cv2.perspectiveTransform(target_corners, H).squeeze()  <span class="comment"># 有一维没有用, 所以squeeze</span></div><div class="line">    <span class="keyword">print</span> source_corners</div><div class="line"></div><div class="line">    <span class="comment"># draw the found (or matched) region</span></div><div class="line">    cv2.line(source, tuple(source_corners[<span class="number">0</span>]), tuple(source_corners[<span class="number">1</span>]), color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thickness=<span class="number">2</span>)</div><div class="line">    cv2.line(source, tuple(source_corners[<span class="number">0</span>]), tuple(source_corners[<span class="number">3</span>]), color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thickness=<span class="number">2</span>)</div><div class="line">    cv2.line(source, tuple(source_corners[<span class="number">1</span>]), tuple(source_corners[<span class="number">2</span>]), color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thickness=<span class="number">2</span>)</div><div class="line">    cv2.line(source, tuple(source_corners[<span class="number">2</span>]), tuple(source_corners[<span class="number">3</span>]), color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thickness=<span class="number">2</span>)</div><div class="line"></div><div class="line">    cv2.namedWindow(<span class="string">"find"</span>, cv2.WINDOW_NORMAL)</div><div class="line">    cv2.imshow(<span class="string">"find"</span>, source)</div><div class="line"></div><div class="line">    <span class="comment"># draw good matched keypoints, show as stacked pics</span></div><div class="line">    vis = drawMatches(target, post1.reshape((<span class="number">-1</span>, <span class="number">2</span>)), source, post2.reshape((<span class="number">-1</span>, <span class="number">2</span>)), good_matches)  <span class="comment"># post1 and post2 should reshape back</span></div><div class="line">    cv2.namedWindow(<span class="string">"match"</span>, cv2.WINDOW_NORMAL)</div><div class="line">    cv2.imshow(<span class="string">"match"</span>, vis)</div><div class="line"></div><div class="line">    cv2.waitKey()</div><div class="line">    cv2.destroyAllWindows()</div></pre></td></tr></table></figure><h2 id="匹配效果"><a href="#匹配效果" class="headerlink" title="匹配效果"></a>匹配效果</h2><p><img src="./image_match_surf_imgs/match_result.png" alt="result"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.programcreek.com/python/example/89377/cv2.perspectiveTransform" target="_blank" rel="external">https://www.programcreek.com/python/example/89377/cv2.perspectiveTransform</a></p>]]></content>
    
    <summary type="html">
    
      基于SURF图像匹配查找
    
    </summary>
    
      <category term="计算机视觉" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="OpenCV" scheme="http://yoursite.com/tags/OpenCV/"/>
    
      <category term="cv2" scheme="http://yoursite.com/tags/cv2/"/>
    
  </entry>
  
  <entry>
    <title>颜色检测器</title>
    <link href="http://yoursite.com/2018/05/02/color_detector/"/>
    <id>http://yoursite.com/2018/05/02/color_detector/</id>
    <published>2018-05-02T01:01:01.000Z</published>
    <updated>2018-05-02T08:37:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>颜色检测器</p>]]></content>
    
    <summary type="html">
    
      Python OpenCV 颜色检测
    
    </summary>
    
      <category term="计算机视觉" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="OpenCV" scheme="http://yoursite.com/tags/OpenCV/"/>
    
      <category term="cv2" scheme="http://yoursite.com/tags/cv2/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 基础总结</title>
    <link href="http://yoursite.com/2018/02/09/opencv_basics/"/>
    <id>http://yoursite.com/2018/02/09/opencv_basics/</id>
    <published>2018-02-09T02:05:51.000Z</published>
    <updated>2018-04-29T08:53:13.364Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像读取、保存、显示"><a href="#图像读取、保存、显示" class="headerlink" title="图像读取、保存、显示"></a>图像读取、保存、显示</h2><h3 id="1-读取"><a href="#1-读取" class="headerlink" title="1) 读取"></a>1) 读取</h3><p>using namespace cv;</p><p>Mat img = imread(“/path/to/image/img.jpg”, CV_LOAD_IMAGE_UNCHANGED);</p><p>CV_LOAD_IMAGE_UNCHANGED = -1 // IMREAD_UNCHANGED</p><p>CV_LOAD_IMAGE_GRAYSCALE = 0  // IMREAD_GRAYSCALE</p><p>CV_LOAD_IMAGE_COLOR = 1      // IMREAD_COLOR</p><p>CV_LOAD_IMAGE_ANYDEPTH = 2   // IMREAD_ANYDEPTH</p><p>CV_LOAD_IMAGE_ANYCOLOR = 4   // IMREAD_ANYCOLOR</p><h3 id="2-保存"><a href="#2-保存" class="headerlink" title="2) 保存"></a>2) 保存</h3><p>bool imwrite( const string&amp; filename, InputArray img, const vector<int>&amp; params=vector<int>() );</int></int></p><p>参数分别是：含后缀图像名，图像矩阵，图像保存参数如压缩等级等。</p><h3 id="3-显示"><a href="#3-显示" class="headerlink" title="3) 显示"></a>3) 显示</h3><p>void namedWindow( const string&amp; winname, int flags=WINDOW_AUTOSIZE );</p><p>命名窗口，其中参数WINDOW_AUTOSIZE表示自适应成图像大小，且不可手动调整大小。WINDOW_NORMAL则可以自由调整窗口大小。</p><p>void moveWindow(const String &amp;winname, int x, int y); // 水平, 竖直方向</p><p>移动指定窗口的位置。</p><p>void imshow(const string&amp; winname, InputArray mat);</p><p>显示图像mat到特定窗口。</p><p>destroyWindow(); // destroyAllWindows();</p><p>关闭窗口释放内存。</p><h2 id="Mat矩阵的选取、加减乘除"><a href="#Mat矩阵的选取、加减乘除" class="headerlink" title="Mat矩阵的选取、加减乘除"></a>Mat矩阵的选取、加减乘除</h2><h2 id="Mat的统计API"><a href="#Mat的统计API" class="headerlink" title="Mat的统计API"></a>Mat的统计API</h2><p>##</p>]]></content>
    
    <summary type="html">
    
      OpenCV C++基础总结, 主要是一些矩阵操作。
    
    </summary>
    
      <category term="计算机视觉" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="OpenCV" scheme="http://yoursite.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/28/hello-world/"/>
    <id>http://yoursite.com/2018/01/28/hello-world/</id>
    <published>2018-01-28T11:38:43.000Z</published>
    <updated>2018-04-29T08:53:13.364Z</updated>
    
    <content type="html"><![CDATA[<p>你好！Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你好！Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="helloworld" scheme="http://yoursite.com/tags/helloworld/"/>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
</feed>
